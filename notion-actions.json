import fetch from "node-fetch";
import { parsePageProperties } from "../parser.js";
import { logIssue } from "../logger.js";

const NOTION_VERSION = "2025-09-03";

export default async function handler(req, res) {
  try {
    console.log("---------------------------------------------------");
    console.log("👉 Function invoked at:", new Date().toISOString());
    console.log("👉 Raw req.body:", req.body);

    // Handle raw string body (Vercel sometimes passes strings)
    const body = typeof req.body === "string" ? JSON.parse(req.body) : req.body;
    console.log("👉 Parsed body:", body);

    const { data_source_id, page_size = 1 } = body;
    console.log("👉 Using data_source_id:", data_source_id);
    console.log("👉 NOTION_TOKEN present?", !!process.env.NOTION_TOKEN);

    if (!data_source_id) {
      const message = "❌ data_source_id is required in the request body.";
      console.error(message);
      return res.status(400).json({ error: message });
    }

    // Build query
    const notionURL = `https://api.notion.com/v1/data-sources/${data_source_id}/query`;
    console.log("👉 Notion endpoint:", notionURL);

    const notionRes = await fetch(notionURL, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.NOTION_TOKEN}`,
        "Notion-Version": NOTION_VERSION,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ page_size })
    });

    console.log("👉 Notion response status:", notionRes.status);

    // Read Notion response
    const text = await notionRes.text();
    console.log("👉 Notion raw response text:", text);

    if (!notionRes.ok) {
      console.error("❌ Notion API returned an error:", text);
      logIssue(`❌ Notion API error: ${text}`);
      return res.status(notionRes.status).json({
        error: "Notion API error",
        details: text
      });
    }

    // Parse response
    const data = JSON.parse(text);
    console.log("✅ Parsed Notion response successfully.");

    const parsed = data.results.map((page) =>
      parsePageProperties(page, logIssue)
    );

    res.status(200).json({
      message: "✅ Successfully retrieved data from Notion.",
      parsed,
      raw: data
    });
  } catch (err) {
    console.error("❌ queryDatabase crashed:", err.message);
    console.error(err.stack);
    logIssue(`❌ queryDatabase crashed: ${err.message}`);
    res.status(500).json({ error: err.message });
  }
}